# -*- coding: utf-8 -*-
"""URL

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tJWbf2N-5ZmboijMccnrbC1p-ulVoCjQ
"""

!pip install imbalanced-learn

# Install required packages
!pip install imbalanced-learn

# Importing libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder
from imblearn.over_sampling import SMOTE
from imblearn.pipeline import Pipeline


# Loading the dataset
df = pd.read_csv('malicious_phish.csv')

# Loading a random 10% sample of the data
df_sample = df.sample(frac=0.1, random_state=42)

# Preprocess the data
X = df_sample['url']
y = df_sample['type']

# Encoding labels
le = LabelEncoder()
y = le.fit_transform(y)

# Spliting the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Creating pipelines for both classifiers
nb_pipeline = Pipeline([
    ('tfidf', TfidfVectorizer()),
    ('smote', SMOTE(random_state=42)),
    ('classifier', MultinomialNB())
])

svm_pipeline = Pipeline([
    ('tfidf', TfidfVectorizer()),
    ('smote', SMOTE(random_state=42)),
    ('classifier', SVC(kernel='rbf', random_state=42))
])

# Training both classifiers
nb_pipeline.fit(X_train, y_train)
svm_pipeline.fit(X_train, y_train)

# Function to evaluate and print metrics
def evaluate_classifier(pipeline, X_test, y_test, classifier_name):
    y_pred = pipeline.predict(X_test)
    print(f"\n{classifier_name} Results:")
    print(classification_report(y_test, y_pred, target_names=le.classes_))
    print("Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))

# Evaluating both classifiers
evaluate_classifier(nb_pipeline, X_test, y_test, "Naive Bayes")
evaluate_classifier(svm_pipeline, X_test, y_test, "Support Vector Machine")

# Algorithm for URL Classification with Naive Bayes and SVM

# 1. Install Required Packages:
INSTALL imbalanced-learn

# 2. Import Libraries:

# 3. Load and Sample Data:

# 4. Preprocess Data:
EXTRACT 'url' COLUMN FROM df_sample INTO X
EXTRACT 'type' COLUMN FROM df_sample INTO y
INITIALIZE LabelEncoder AS le
ENCODE y USING le

# 5. Split Data:
SPLIT X AND y INTO TRAINING AND TEST SETS WITH 80% TRAINING AND 20% TESTING

# 6. Create Pipelines for Classifiers:
## Naive Bayes Pipeline:
INITIALIZE nb_pipeline AS Pipeline WITH:
  - TfidfVectorizer
  - SMOTE WITH SEED 42
  - MultinomialNB

## SVM Pipeline:
INITIALIZE svm_pipeline AS Pipeline WITH:
  - TfidfVectorizer
  - SMOTE WITH SEED 42
  - SVC WITH RBF KERNEL AND SEED 42

# 7. Train Classifiers:
TRAIN nb_pipeline USING TRAINING DATA
TRAIN svm_pipeline USING TRAINING DATA

# 8. Evaluate Classifiers:
## Function to Evaluate Classifiers:
DEFINE FUNCTION evaluate_classifier(pipeline, X_test, y_test, classifier_name):
  PREDICT y_pred USING pipeline ON X_test
  PRINT classifier_name AND EVALUATION RESULTS:
    - classification_report OF y_test AND y_pred WITH TARGET NAMES FROM le
    - confusion_matrix OF y_test AND y_pred

## Evaluate Both Classifiers:
CALL evaluate_classifier WITH nb_pipeline, X_test, y_test, AND 'Naive Bayes'
CALL evaluate_classifier WITH svm_pipeline, X_test, y_test, AND 'Support Vector Machine'